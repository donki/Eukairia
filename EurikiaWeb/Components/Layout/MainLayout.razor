@inherits LayoutComponentBase

@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavigationManager

<MyMudThemeProvider />
<MudSnackbarProvider />

<div class="page mud-layout">
    <div class="sidebar mud-elevation-1">
        <div class="top-row mud-drawer-head d-flex justify-content-between">
            <div>
                <MudChip Icon="@Icons.Material.Filled.HourglassEmpty" Color="Color.Secondary">Eurikia</MudChip>
            </div>
            <div class="user-name">
                <!-- Asume que tienes una manera de obtener el nombre del usuario, por ejemplo, @UserName -->
                <MudText>@UserName</MudText>
                </div>
            </div>

            <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
                <NavMenu />
            </div>
        </div>

        <main>
            <div class="top-row px-4">
            </div>

            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="my-2 pt-2">
                @Body
        </MudContainer>
    </main>
</div>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {

    private Timer? _timer;
    private int counter = 0;
    private string UserName;

    private async Task CheckSession()
    {
        var expirationDateResult = await SessionStorage.GetAsync<DateTime>("sessionExpiration");
        if (expirationDateResult.Success && expirationDateResult.Value < DateTime.Now)
        {
            NavigationManager.NavigateTo("/");
        }

    }

    public void Dispose()
    {
        _timer.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var result = await SessionStorage.GetAsync<bool>("isAuthenticated");
        var UserName = await SessionStorage.GetAsync<string>("Name");
        if (!result.Success || !result.Value)
        {
            NavigationManager.NavigateTo("/");

        }

        _timer = new Timer(async _ => await InvokeAsync(CheckSession), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }
}