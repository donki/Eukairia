@inherits MudDialog
@using EukairiaWeb.Data.Models
@rendermode InteractiveServer

@inject WorkShiftService WorkShiftService
@inject UsersService UsersService
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<MudDialog>
    <DialogContent>
        <MudForm Model="WorkShift">
            <MudSelect T="Guid" Label="Seleccione un usuario" @bind-Value="WorkShift.UserId">
                @foreach (var user in Users)
                {
                    <MudSelectItem Value="@user.UserId">@user.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTimePicker Label="Inicio del Turno" @bind-Time="WorkShift.StartTime" />
            <MudTimePicker Label="Fin del Turno" @bind-Time="WorkShift.EndTime" />

            <MudText Typo="Typo.body1" GutterBottom="true">Días Activos:</MudText>
            @foreach (var day in Enum.GetValues<DaysOfWeek>())
            {
                if (day == DaysOfWeek.Ninguno) continue; // Ignorar 'None'
                <MudCheckBox Checked="@GetDayActive(day)"
                             ValueChanged="@((bool value) => SetDayActive(day, value))">@day.ToString()</MudCheckBox>
            }

            <MudDatePicker Label="Fecha de Inicio" @bind-Date="WorkShift.StartDate" />
            <MudDatePicker Label="Fecha de Fin (opcional)" @bind-Date="WorkShift.EndDate" />

            <MudTimePicker Label="Hora Máxima de Entrada" @bind-Time="WorkShift.MaxEntryTime" />
            <MudTimePicker Label="Hora Mínima de Salida" @bind-Time="WorkShift.MinExitTime" />

            <MudTimePicker Label="Horas por Día" @bind-Time="WorkShift.HoursPerDay" />
            <MudTimePicker Label="Horas Máximas por Día" @bind-Time="WorkShift.MaxHoursPerDay" />


        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="@Save">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {

    public List<User> Users { get; set; } = new List<User>();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public EventCallback<WorkShift> OnSave { get; set; }
    [Parameter] public WorkShift WorkShift { get; set; }

    void Cancel() => MudDialog.Cancel();

    async Task Save()
    {

        bool isNewWorkShift = WorkShift.Id == Guid.Empty;


        if (isNewWorkShift)
        {
            await WorkShiftService.AddWorkShiftAsync(WorkShift);
            Snackbar.Add("Turno creado", Severity.Success);
        }
        else
        {
            await WorkShiftService.UpdateWorkShiftAsync(WorkShift);
            Snackbar.Add("Turno actualizado", Severity.Success);
        }

        MudDialog.Close(DialogResult.Ok(WorkShift));


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Users = await UsersService.GetUsersAsync();
            StateHasChanged();
        }


    }

    private bool GetDayActive(DaysOfWeek day)
    {
        if (WorkShift!= null)
        {
            return WorkShift.ActiveDays.HasFlag(day);
        } else
        {
            return false;
        }

    }

    private void SetDayActive(DaysOfWeek day, bool isChecked)
    {
        if (isChecked)
        {
            WorkShift.ActiveDays |= day; // Añadir el día seleccionado.
        }
        else
        {
            WorkShift.ActiveDays &= ~day; // Remover el día deseleccionado.
        }
        InvokeAsync(StateHasChanged);
    }


}
