@page "/leaverequest"
@rendermode InteractiveServer
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Services
@inject LeaveRequestService LeaveRequestService
@inject IDialogService DialogService
@inject ProtectedSessionStorage SessionStorage

<MyMudProviders />

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() =>OpenLeaveRequestDialog(new LeaveRequest()))">Agregar Solicitud</MudButton>

<MudTable Items="@leaveRequests">
    <HeaderContent>
        <MudTh>Fecha Inicio</MudTh>
        <MudTh>Fecha Fin</MudTh>
        <MudTh>Tipo de Permiso</MudTh>
        <MudTh>Razón</MudTh>
        <MudTh>Estado</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.StartDate?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>@context.EndDate?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>
                @((@context.LeaveType switch
            {
                LeaveType.Paid => "Retribuido",
                LeaveType.UnPaid => "No retribuido",
                LeaveType.Vacation => "Vacaciones",
                _ => context.LeaveType.ToString()
            }))
        </MudTd>
            <MudTd>@context.Reason</MudTd>
            <MudTd>
                @((@context.IsPending switch
            {
                LeaveRequestStatus.Pending => "Pendiente",
                LeaveRequestStatus.Approved => "Aceptada",
                LeaveRequestStatus.Denied => "Denegada",
                _ => context.IsPending.ToString()
            }))
        </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteUser(context))" Color="Color.Error" />
            </MudTd>
        </RowTemplate>
    </MudTable>

    @code {
    private List<LeaveRequest> leaveRequests = new List<LeaveRequest>();

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        await LoadLeaveRequests();

    }

    private async Task OpenLeaveRequestDialog(LeaveRequest leaveRequest = null)
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.TopCenter
            };

        var parameters = new DialogParameters();
        if (leaveRequest != null) parameters.Add("User", leaveRequest);

        var dialog = DialogService.Show<LeaveRequestDialog>("Nueva Solicitud de Permiso", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await LoadLeaveRequests();
            StateHasChanged();
        }
    }

    private async Task LoadLeaveRequests()
    {
        var result = await SessionStorage.GetAsync<Guid>("UserId");
        if (!result.Success || (!result.Value.Equals(Guid.Empty)))
        {
            var UserId = result.Value;
            leaveRequests = await LeaveRequestService.GetLeaveRequestsByUserAsync(UserId);
            StateHasChanged();

        }
    }

    private async Task DeleteUser(LeaveRequest leaveRequest)
    {
        bool? result = await DialogService.ShowMessageBox("Confirmación", $"¿Estás seguro de que quieres eliminar la solicitud?", yesText: "Eliminar", cancelText: "Cancelar");

        if (result == true)
        {
            await LeaveRequestService.DeleteLeaveRequestAsync(leaveRequest);
            LoadLeaveRequests();
        }
    }
}
