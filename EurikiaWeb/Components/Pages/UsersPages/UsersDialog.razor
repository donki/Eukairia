@inherits MudDialog
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Services
@using EukairiaWeb.Helpers

@inject UsersService UserService
@inject RolesService RolesService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <form autocomplete="off">
            <MudForm>
                <MudTextField Label="Id" @bind-Value="User.UserId" FullWidth Variant="Variant.Filled" ReadOnly/>
                <MudTextField Label="Correo electrónico" @bind-Value="User.Email" FullWidth Variant="Variant.Filled" />
                 <MudTextField Label="Nombre" @bind-Value="@User.Name" FullWidth />
                 <MudTextField Label="Contraseña" UserAttributes=@InputAttributes @bind-Value="@password" InputType="InputType.Password" FullWidth />
                 <MudTextField Label="Confirmar contraseña" @bind-Value="@confirmPassword" InputType="InputType.Password" FullWidth />

                 <!-- Selector de Rol -->
                 <MudSelect Label="Rol" @bind-Value="User.RoleId" FullWidth>
                    @foreach (var role in roles)
                    {
                        <MudSelectItem T="Guid" Value="@role.RoleId">@role.RoleName</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
        </form>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton OnClick="Save" Color="Color.Primary" Disabled="@(password != confirmPassword && !string.IsNullOrEmpty(password))">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {

    public Dictionary<string, object> InputAttributes { get; set; } =
    new Dictionary<string, object>()
            {
               { "autocomplete", "new-password" },
            };

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public User User { get; set; }

    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private List<Role> roles;

    private async Task Save()
    {
        bool isNewUser = User.UserId == Guid.Empty;

        if (isNewUser || !string.IsNullOrEmpty(password))
        {
            if (!string.IsNullOrEmpty(password))
            {
                if (password != confirmPassword)
                {
                    Snackbar.Add("Las contraseñas no coinciden", Severity.Error);
                    return;
                }
                User.Password = SecurityHelper.HashValue(password);
            }

            if (isNewUser)
            {
                await UserService.AddUserAsync(User);
                Snackbar.Add("Usuario creado", Severity.Success);
            }
            else
            {
                await UserService.UpdateUserAsync(User);
                Snackbar.Add("Usuario actualizado", Severity.Success);
            }

            MudDialog.Close(DialogResult.Ok(User));
        }
        else
        {
            // Si es actualización de usuario y no se cambia la contraseña, sigue adelante con otros campos
            if (!isNewUser)
            {
                await UserService.UpdateUserAsync(User);
                Snackbar.Add("Usuario Actualizado", Severity.Success);
                MudDialog.Close(DialogResult.Ok(User));
            }
            else
            {
                // En caso de nuevo usuario y contraseña vacía, mostrar error
                Snackbar.Add("La contraseña no puede estar vacía", Severity.Error);
            }
        }
    }


    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    protected override async Task OnInitializedAsync()
    {
        roles = await RolesService.GetRolesAsync(); // Asume que este método obtiene los roles disponibles

    }
}

