@page "/home"
@rendermode InteractiveServer
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Components.Layout
@using System.Security.Claims

@inject ProtectedSessionStorage SessionStorage
@inject ISnackbar Snackbar
@inject TimeTrackingService TimeTrackingService
@inject WorkShiftService WorkShiftService;
@inject UsersService UsersService
@layout MainLayout

<PageTitle>Home</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="6" sm="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100px; text-align:center; align-content:center; align-items:center"><MudButton Size="Size.Large" StartIcon="@Icons.Material.Filled.AddAlarm" OnClick="TrackTime" Color="Color.Primary">Registrar Hora</MudButton></MudPaper>
        </MudItem>
        <MudItem xs="6" sm="9">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="max-height: 200px; overflow-y: auto;">
                        <MudTable Items="tracks">
                            <HeaderContent>
                                <MudTh>Inicio</MudTh>
                                <MudTh>Final</MudTh>
                                <MudTh>Tiempo dentro del turno</MudTh>
                                <MudTh>Tiempo No Computable</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                    <MudTd DataLabel="Start Time">@context.StartTime.ToString("HH:mm")</MudTd>
                                    <MudTd DataLabel="End Time">@context.EndTime?.ToString("HH:mm")</MudTd>
                                    <MudTd DataLabel="End Time">@context.MinutesWithinShift.ToString(@"hh\:mm")</MudTd>
                                    <MudTd DataLabel="End Time">@context.MinutesOutsideShift.ToString(@"hh\:mm")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
            <MudItem xs="6" sm="3" Class="center-text">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center"><MudText Typo="Typo.h6">Hoy <br /> @Summary?.Daily</MudText></MudPaper>
            </MudItem>
            <MudItem xs="6" sm="3" Class="center-text">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center"><MudText Typo="Typo.h6">Semana Actual<br /> @Summary?.Weekly</MudText></MudPaper>
            </MudItem>
            <MudItem xs="6" sm="3" Class="center-text">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center"><MudText Typo="Typo.h6">Mes Actual<br /> @Summary?.Monthly</MudText></MudPaper>
            </MudItem>
            <MudItem xs="6" sm="3" Class="center-text">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center"><MudText Typo="Typo.h6">Año Actual<br /> @Summary?.Yearly</MudText></MudPaper>
            </MudItem>
     </MudGrid>
</MudContainer>


    @code {

    private Guid UserId = Guid.Empty;
    private List<TimeTracking> tracks = new();
    private TimeTrackingSummary Summary;



    private async Task TrackTime()
    {
        if (!UserId.Equals(Guid.Empty))
        {
            if(await WorkShiftService.CanRegisterTime(UserId,DateTime.Now))
            {
                await TimeTrackingService.TryTrackTimeAsync(UserId, DateTime.Now, DateTime.Now);
                tracks = await TimeTrackingService.GetTodaysTracksAsync(UserId);
                Summary = await TimeTrackingService.GetTimeTrackingSummary(UserId);
                StateHasChanged();

            } else
            {
                Snackbar.Add("No se ha encontrado un turno para el usuario actual válido. No se puede iniciar el turno.", Severity.Error);
            }
        }
    }


}