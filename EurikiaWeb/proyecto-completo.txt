@inherits LayoutComponentBase
@using EukairiaWeb.Components.Themes;

<ProvidersAggregate></ProvidersAggregate>

@Body

@code {

}
@inherits LayoutComponentBase
@using EukairiaWeb.Components.Themes;
@inject ProtectedSessionStorage SessionStorage



<ProvidersAggregate></ProvidersAggregate>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudChip Label="true" Color="Color.Secondary" Icon="@Icons.Material.Filled.HourglassEmpty">Eukairia</MudChip>
        <MudSpacer />
        <MudChip Label="true" Color="Color.Secondary" Icon="@Icons.Material.Filled.Person" Edge="Edge.End">@UserName</MudChip>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1" ClipMode="DrawerClipMode.Always">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>



<div id="blazor-error-ui">
    Ha ocurrido un error no controlado
    <a href="" class="reload">Reload</a>
    <a class="dismiss">??</a>
</div>


@code {
    bool _drawerOpen = false;
    string UserName = "";


    public void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var username = await SessionStorage.GetAsync<string>("Username");
        if (username.Success)
        {
            UserName = username.Value;
            StateHasChanged();
        }
    }
}
@rendermode InteractiveServer

@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavigationManager

<MudNavMenu>
    <MudNavLink Href="home" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="timesummary" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Schedule">Registro horario</MudNavLink>
    <MudNavLink Href="users" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person2">Usuarios</MudNavLink>
    <MudNavLink Href="leaverequest" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.TagFaces">Solicitar permiso</MudNavLink>
    <MudNavLink Href="calendar" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.CalendarMonth">Calendario</MudNavLink>
    <MudNavGroup Title="Administración" Expanded="false">
        <MudNavLink Href="manageleaverequest" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AddReaction">Gestionar permisos</MudNavLink>

        <MudNavLink Href="workshifts" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.FilterTiltShift">Turnos</MudNavLink>
        <MudNavLink Href="security" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person2">Seguridad</MudNavLink>
        <MudNavLink Href="import" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dataset">Importar Datos</MudNavLink>
    </MudNavGroup>
    <MudNavLink @onclick="Dologout" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Logout">Salir</MudNavLink>
</MudNavMenu>

@code {

    async Task Dologout()
    {
        await SessionStorage.SetAsync("isAuthenticated", false);
        await SessionStorage.SetAsync("sessionExpiration", DateTime.Now.AddDays(-1000));
        await SessionStorage.SetAsync("sessionData", null);

        NavigationManager.NavigateTo("/");
    }

}
@inherits MudDialog
@rendermode InteractiveServer
@inject LeaveRequestService LeaveRequestService
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Services
@using EukairiaWeb.Helpers
@inject ISnackbar Snackbar
@inject ProtectedSessionStorage SessionStorage

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudDatePicker Label="Fecha de Inicio" @bind-Date="@leaveRequest.StartDate" />
            <MudDatePicker Label="Fecha de fin" @bind-Date="@leaveRequest.EndDate" />
            <MudSelect Label="Tipo de permiso" T="LeaveType" @bind-Value="leaveRequest.LeaveType">
                <MudSelectItem Value="LeaveType.Paid">Retribuido</MudSelectItem>
                <MudSelectItem Value="LeaveType.UnPaid">No retribuido</MudSelectItem>
                <MudSelectItem Value="LeaveType.Vacation">Vacaciones</MudSelectItem>
            </MudSelect>
            <MudTextField Label="Razón" @bind-Value="@leaveRequest.Reason" T="string" Multiline="true" Rows="4" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton OnClick="Save" Color="Color.Primary">Enviar solicitud</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public LeaveRequest leaveRequest { get; set; } = new LeaveRequest();

    private async Task Save()
    {
        var result = await SessionStorage.GetAsync<Guid>("UserId");
        if (!result.Success || (!result.Value.Equals(Guid.Empty)))
        {
            var UserId = result.Value;
            leaveRequest.UserId = UserId;

        }
        await LeaveRequestService.AddLeaveRequestAsync(leaveRequest);
        Snackbar.Add("Petición registrada", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }
}
}
}
@page "/leaverequest"
@rendermode InteractiveServer
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Services
@inject LeaveRequestService LeaveRequestService
@inject IDialogService DialogService
@inject ProtectedSessionStorage SessionStorage

<MyMudProviders />

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() =>OpenLeaveRequestDialog(new LeaveRequest()))">Agregar Solicitud</MudButton>

<MudTable Items="@leaveRequests">
    <HeaderContent>
        <MudTh>Fecha Inicio</MudTh>
        <MudTh>Fecha Fin</MudTh>
        <MudTh>Tipo de Permiso</MudTh>
        <MudTh>Razón</MudTh>
        <MudTh>Estado</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.StartDate?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>@context.EndDate?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>
                @((@context.LeaveType switch
            {
                LeaveType.Paid => "Retribuido",
                LeaveType.UnPaid => "No retribuido",
                LeaveType.Vacation => "Vacaciones",
                _ => context.LeaveType.ToString()
            }))
        </MudTd>
            <MudTd>@context.Reason</MudTd>
            <MudTd>
                @((@context.IsPending switch
            {
                LeaveRequestStatus.Pending => "Pendiente",
                LeaveRequestStatus.Approved => "Aceptada",
                LeaveRequestStatus.Denied => "Denegada",
                _ => context.IsPending.ToString()
            }))
        </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteUser(context))" Color="Color.Error" />
            </MudTd>
        </RowTemplate>
    </MudTable>

    @code {
    private List<LeaveRequest> leaveRequests = new List<LeaveRequest>();

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        await LoadLeaveRequests();

    }

    private async Task OpenLeaveRequestDialog(LeaveRequest leaveRequest = null)
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.TopCenter
            };

        var parameters = new DialogParameters();
        if (leaveRequest != null) parameters.Add("User", leaveRequest);

        var dialog = DialogService.Show<LeaveRequestDialog>("Nueva Solicitud de Permiso", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await LoadLeaveRequests();
            StateHasChanged();
        }
    }

    private async Task LoadLeaveRequests()
    {
        var result = await SessionStorage.GetAsync<Guid>("UserId");
        if (!result.Success || (!result.Value.Equals(Guid.Empty)))
        {
            var UserId = result.Value;
            leaveRequests = await LeaveRequestService.GetLeaveRequestsByUserAsync(UserId);
            StateHasChanged();

        }
    }

    private async Task DeleteUser(LeaveRequest leaveRequest)
    {
        bool? result = await DialogService.ShowMessageBox("Confirmación", $"¿Estás seguro de que quieres eliminar la solicitud?", yesText: "Eliminar", cancelText: "Cancelar");

        if (result == true)
        {
            await LeaveRequestService.DeleteLeaveRequestAsync(leaveRequest);
            LoadLeaveRequests();
        }
    }
}
@page "/users"
@rendermode InteractiveServer
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Helpers
@using EukairiaWeb.Services
@using EukairiaWeb.Components

@inject IDialogService DialogService
@inject UsersService UsersService



<MyMudThemeProvider />

<PageTitle>Usuarios</PageTitle>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenUserDialog(new User()))">Agregar Usuario</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OpenAzureAdImportDialog">Importar Usuarios de Azure AD</MudButton>

<MudTable Items="@users" Dense="true" Hover="true" Striped="true" Filter="FilterFunc" PageSize="10">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="Buscar..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" @onkeyup="@(e => InvokeAsync(Table.ReloadServerData))" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Email</MudTh>
        <MudTh>Nombre de Usuario</MudTh>
        <MudTh>Nombre</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Nombre">@context.Name</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenUserDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteUser(context))" Color="Color.Error" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @code {
    private MudTable<User> Table;
    private string searchString = "";
    private IEnumerable<User> users = Enumerable.Empty<User>(); // Supon que aquí cargas tus usuarios desde alguna fuente, como una base de datos


    private Func<User, bool> FilterFunc => user =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    private async Task OpenUserDialog(User user = null)
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.TopCenter
            };

        var parameters = new DialogParameters();
        if (user != null) parameters.Add("User", user);

        var dialog = DialogService.Show<UsersDialog>("Usuario", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            users = await UsersService.GetUsersAsync();
            StateHasChanged(); 
        }
    }

    private async Task DeleteUser(User user)
    {
        bool? result = await DialogService.ShowMessageBox("Confirmación", $"¿Estás seguro de que quieres eliminar a {user.Name}?", yesText: "Eliminar", cancelText: "Cancelar");

        if (result == true)
        {
            await UsersService.DeleteUserAsync(user);
            users = await UsersService.GetUsersAsync(); // Recargar la lista
            StateHasChanged(); // Asegúrate de que la UI se actualice
        }
    }

    protected override async Task OnInitializedAsync()
    {
        users = await UsersService.GetUsersAsync();
    }

    private async Task OpenAzureAdImportDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialog = DialogService.Show<AzureAdImportDialog>("Importar Usuarios de Azure AD", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is  AzureAdCredentials)
        {
            var credentials = (AzureAdCredentials)result.Data;
            // Llamar a la función para importar usuarios aquí
            await UsersService.ImportUsersFromAzureAd(credentials.TenantId, credentials.ClientId, credentials.ClientSecret);
            users = await UsersService.GetUsersAsync();
        }
    }

}

@inherits MudDialog
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Services
@using EukairiaWeb.Helpers

@inject UsersService UserService
@inject RolesService RolesService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <form autocomplete="off">
            <MudForm>
                <MudTextField Label="Id" @bind-Value="User.UserId" FullWidth Variant="Variant.Filled" ReadOnly/>
                <MudTextField Label="Correo electrónico" @bind-Value="User.Email" FullWidth Variant="Variant.Filled" />
                 <MudTextField Label="Nombre" @bind-Value="@User.Name" FullWidth />
                 <MudTextField Label="Contraseña" UserAttributes=@InputAttributes @bind-Value="@password" InputType="InputType.Password" FullWidth />
                 <MudTextField Label="Confirmar contraseña" @bind-Value="@confirmPassword" InputType="InputType.Password" FullWidth />

                 <!-- Selector de Rol -->
                 <MudSelect Label="Rol" @bind-Value="User.RoleId" FullWidth>
                    @foreach (var role in roles)
                    {
                        <MudSelectItem T="Guid" Value="@role.RoleId">@role.RoleName</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
        </form>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton OnClick="Save" Color="Color.Primary" Disabled="@(password != confirmPassword && !string.IsNullOrEmpty(password))">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {

    public Dictionary<string, object> InputAttributes { get; set; } =
    new Dictionary<string, object>()
            {
               { "autocomplete", "new-password" },
            };

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public User User { get; set; }

    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private List<Role> roles;

    private async Task Save()
    {
        bool isNewUser = User.UserId == Guid.Empty;

        if (isNewUser || !string.IsNullOrEmpty(password))
        {
            if (!string.IsNullOrEmpty(password))
            {
                if (password != confirmPassword)
                {
                    Snackbar.Add("Las contraseñas no coinciden", Severity.Error);
                    return;
                }
                User.Password = SecurityHelper.HashValue(password);
            }

            if (isNewUser)
            {
                await UserService.AddUserAsync(User);
                Snackbar.Add("Usuario creado", Severity.Success);
            }
            else
            {
                await UserService.UpdateUserAsync(User);
                Snackbar.Add("Usuario actualizado", Severity.Success);
            }

            MudDialog.Close(DialogResult.Ok(User));
        }
        else
        {
            // Si es actualización de usuario y no se cambia la contraseña, sigue adelante con otros campos
            if (!isNewUser)
            {
                await UserService.UpdateUserAsync(User);
                Snackbar.Add("Usuario Actualizado", Severity.Success);
                MudDialog.Close(DialogResult.Ok(User));
            }
            else
            {
                // En caso de nuevo usuario y contraseña vacía, mostrar error
                Snackbar.Add("La contraseña no puede estar vacía", Severity.Error);
            }
        }
    }


    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    protected override async Task OnInitializedAsync()
    {
        roles = await RolesService.GetRolesAsync(); // Asume que este método obtiene los roles disponibles

    }
}

@inherits MudDialog
@using EukairiaWeb.Data.Models
@rendermode InteractiveServer

@inject WorkShiftService WorkShiftService
@inject UsersService UsersService
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<MudDialog>
    <DialogContent>
        <MudForm Model="WorkShift">
            <MudSelect T="Guid" Label="Seleccione un usuario" @bind-Value="WorkShift.UserId">
                @foreach (var user in Users)
                {
                    <MudSelectItem Value="@user.UserId">@user.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTimePicker Label="Inicio del Turno" @bind-Time="WorkShift.StartTime" />
            <MudTimePicker Label="Fin del Turno" @bind-Time="WorkShift.EndTime" />

            <MudText Typo="Typo.body1" GutterBottom="true">Días Activos:</MudText>
            @foreach (var day in Enum.GetValues<DaysOfWeek>())
            {
                if (day == DaysOfWeek.Ninguno) continue; // Ignorar 'None'
                <MudCheckBox Checked="@GetDayActive(day)"
                             ValueChanged="@((bool value) => SetDayActive(day, value))">@day.ToString()</MudCheckBox>
            }

            <MudDatePicker Label="Fecha de Inicio" @bind-Date="WorkShift.StartDate" />
            <MudDatePicker Label="Fecha de Fin (opcional)" @bind-Date="WorkShift.EndDate" />

            <MudTimePicker Label="Hora Máxima de Entrada" @bind-Time="WorkShift.MaxEntryTime" />
            <MudTimePicker Label="Hora Mínima de Salida" @bind-Time="WorkShift.MinExitTime" />

            <MudTimePicker Label="Horas por Día" @bind-Time="WorkShift.HoursPerDay" />
            <MudTimePicker Label="Horas Máximas por Día" @bind-Time="WorkShift.MaxHoursPerDay" />


        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="@Save">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {

    public List<User> Users { get; set; } = new List<User>();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public EventCallback<WorkShift> OnSave { get; set; }
    [Parameter] public WorkShift WorkShift { get; set; }

    void Cancel() => MudDialog.Cancel();

    async Task Save()
    {

        bool isNewWorkShift = WorkShift.Id == Guid.Empty;


        if (isNewWorkShift)
        {
            await WorkShiftService.AddWorkShiftAsync(WorkShift);
            Snackbar.Add("Turno creado", Severity.Success);
        }
        else
        {
            await WorkShiftService.UpdateWorkShiftAsync(WorkShift);
            Snackbar.Add("Turno actualizado", Severity.Success);
        }

        MudDialog.Close(DialogResult.Ok(WorkShift));


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Users = await UsersService.GetUsersAsync();
            StateHasChanged();
        }


    }

    private bool GetDayActive(DaysOfWeek day)
    {
        if (WorkShift!= null)
        {
            return WorkShift.ActiveDays.HasFlag(day);
        } else
        {
            return false;
        }

    }

    private void SetDayActive(DaysOfWeek day, bool isChecked)
    {
        if (isChecked)
        {
            WorkShift.ActiveDays |= day; // Añadir el día seleccionado.
        }
        else
        {
            WorkShift.ActiveDays &= ~day; // Remover el día deseleccionado.
        }
        InvokeAsync(StateHasChanged);
    }


}
@page "/workshifts"
@rendermode InteractiveServer
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Services

@inject IDialogService DialogService
@inject WorkShiftService WorkShiftService
@inject TimeTrackingService TimeTrackingService;

<MyMudProviders />
<MudGrid>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenDialog(new WorkShift()))">Agregar Turno</MudButton>
    </MudItem>
    <MudItem>
        <MudTable Items="@workShifts">
            <HeaderContent>
                <MudTh>Usuario</MudTh>
                <MudTh>Inicio del Turno</MudTh>
                <MudTh>Fin del Turno</MudTh>
                <MudTh>Días Activos</MudTh>
                <MudTh>Fecha de Inicio</MudTh>
                <MudTh>Fecha de Fin</MudTh>
                <MudTh>Hora Máxima de Entrada</MudTh>
                <MudTh>Hora Mínima de Salida</MudTh>
                <MudTh>Horas por Día</MudTh>
                <MudTh>Horas Máximas por Día</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Usuario">@context.User.Name</MudTd>
                    <MudTd DataLabel="Inicio del Turno">@context.StartTime?.ToString(@"hh\:mm")</MudTd>
                    <MudTd DataLabel="Fin del Turno">@context.EndTime?.ToString(@"hh\:mm")</MudTd>
                    <MudTd DataLabel="Días Activos">@GetActiveDaysString(context.ActiveDays)</MudTd>
                    <MudTd DataLabel="Fecha de Inicio">@context.StartDate?.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Fecha de Fin">@context.EndDate?.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Hora Máxima de Entrada">@context.MaxEntryTime?.ToString(@"hh\:mm")</MudTd>
                    <MudTd DataLabel="Hora Mínima de Salida">@context.MinExitTime?.ToString(@"hh\:mm")</MudTd>
                    <MudTd DataLabel="Horas Máximas por Día">@context.HoursPerDay?.ToString(@"hh\:mm")</MudTd>
                    <MudTd DataLabel="Horas Máximas por Día">@context.MaxHoursPerDay?.ToString(@"hh\:mm")</MudTd>
                    <MudTd DataLabel="Acciones">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenDialog(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteWorkShift(context.Id))" Color="Color.Error" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>





    @code {
    private List<WorkShift> workShifts = new();

    protected override async Task OnInitializedAsync()
    {
        workShifts = await WorkShiftService.GetAllWorkShiftsAsync();
    }

    private async Task OpenDialog(WorkShift WorkShift = null)
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.TopCenter
            };
        var parameters = new DialogParameters();
        if (WorkShift != null) parameters.Add("WorkShift", WorkShift);
        var dialog = DialogService.Show<WorkShiftDialog>("Turno de Trabajo", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            workShifts = await WorkShiftService.GetAllWorkShiftsAsync();
            await TimeTrackingService.CalculateTimeTrackingAsync();
            StateHasChanged();
        }
    }

    async Task DeleteWorkShift(Guid workShiftId)
    {
        bool? result = await DialogService.ShowMessageBox("Confirmación", $"¿Estás seguro de que quieres eliminar el registro?", yesText: "Eliminar", cancelText: "Cancelar");

        if (result == true)
        {
            await WorkShiftService.DeleteWorkShiftAsync(workShiftId);
            workShifts = await WorkShiftService.GetAllWorkShiftsAsync();
        }
    }

    private string GetActiveDaysString(DaysOfWeek activeDays)
    {
        if (activeDays == DaysOfWeek.Ninguno)
        {
            return "Ninguno";
        }

        var activeDaysList = new List<string>();
        foreach (DaysOfWeek day in Enum.GetValues(typeof(DaysOfWeek)))
        {
            if (day != DaysOfWeek.Ninguno && activeDays.HasFlag(day))
            {
                activeDaysList.Add(day.ToString());
            }
        }

        return string.Join(", ", activeDaysList);
    }

    }
@inherits MudDialog
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using EukairiaWeb.Helpers
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudTextField Label="Tenant ID" UserAttributes=@InputAttributes @bind-Value="tenantId" FullWidth></MudTextField>
            <MudTextField Label="Client ID" UserAttributes=@InputAttributes @bind-Value="clientId" FullWidth></MudTextField>
             <MudTextField Label="Client Secret" UserAttributes=@InputAttributes @bind-Value="clientSecret" InputType="InputType.Password" FullWidth></MudTextField>
         </MudForm>
     </DialogContent>
     <DialogActions>
         <MudButton Color="Color.Primary" OnClick="Submit">Importar</MudButton>
         <MudButton Color="Color.Secondary" OnClick="Cancel">Cancelar</MudButton>
     </DialogActions>
 </MudDialog>

 @code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private string clientId = "";
    private string clientSecret = "";
    private string tenantId = "";

    public Dictionary<string, object> InputAttributes { get; set; } =
    new Dictionary<string, object>()
                {
               { "autocomplete", "new-password" },
                };

    private void Submit()
    {
        if (!string.IsNullOrWhiteSpace(clientId) && !string.IsNullOrWhiteSpace(clientSecret) && !string.IsNullOrWhiteSpace(tenantId))
        {
            // Cierra el diálogo y pasa los valores a quien lo invocó
            MudDialog.Close(DialogResult.Ok(new AzureAdCredentials { TenantId = tenantId, ClientId = clientId, ClientSecret = clientSecret }));
        }
        else
        {
            DialogService.ShowMessageBox("Error", "El Tenant ID, el Client ID y el Client Secret son requeridos.", yesText: "Aceptar");
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}
@page "/error"
@using MudBlazor
@rendermode InteractiveServer
<MyMudProviders />

<MudPaper Class="mud-max-width mud-elevation-24 p-4 mx-auto my-5" Square="true">
    <MudContainer>
        <MudText Typo="Typo.h4" GutterBottom="true">¡Oops! Algo salió mal.</MudText>
        <MudText Typo="Typo.h6" GutterBottom="true">Parece que hemos encontrado un error.</MudText>
        <MudText>Lo sentimos por el inconveniente. Estamos trabajando para solucionar este problema lo antes posible.</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Home"
                   @onclick="@GoHome"></MudButton>
        <MudSpacer />
        <MudText>Si necesitas asistencia inmediata, por favor contacta con soporte.</MudText>
    </MudContainer>
</MudPaper>

@code {
    [Inject] NavigationManager Navigation { get; set; }

    private void GoHome()
    {
        Navigation.NavigateTo("/home");
    }
}
@page "/home"
@rendermode InteractiveServer
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Components.Layout
@using System.Security.Claims

@inject ProtectedSessionStorage SessionStorage
@inject ISnackbar Snackbar
@inject TimeTrackingService TimeTrackingService
@inject WorkShiftService WorkShiftService;
@inject UsersService UsersService
@layout MainLayout

<MudSnackbarProvider />

<PageTitle>Home</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="6" sm="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100px;"><MudButton OnClick="TrackTime" Color="Color.Primary">Registrar</MudButton></MudPaper>
        </MudItem>
        <MudItem xs="6" sm="9">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="max-height: 200px; overflow-y: auto;">
                        <MudTable Items="tracks">
                            <HeaderContent>
                                <MudTh>Inicio</MudTh>
                                <MudTh>Final</MudTh>
                                <MudTh>Tiempo dentro del turno</MudTh>
                                <MudTh>Tiempo No Computable</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                    <MudTd DataLabel="Start Time">@context.StartTime.ToString("HH:mm")</MudTd>
                                    <MudTd DataLabel="End Time">@context.EndTime?.ToString("HH:mm")</MudTd>
                                    <MudTd DataLabel="End Time">@context.MinutesWithinShift.ToString(@"hh\:mm")</MudTd>
                                    <MudTd DataLabel="End Time">@context.MinutesOutsideShift.ToString(@"hh\:mm")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
            <MudItem xs="6" sm="3" Class="center-text">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center"><MudText Typo="Typo.h6">Hoy <br /> @Summary?.Daily</MudText></MudPaper>
            </MudItem>
            <MudItem xs="6" sm="3" Class="center-text">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center"><MudText Typo="Typo.h6">Semana Actual<br /> @Summary?.Weekly</MudText></MudPaper>
            </MudItem>
            <MudItem xs="6" sm="3" Class="center-text">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center"><MudText Typo="Typo.h6">Mes Actual<br /> @Summary?.Monthly</MudText></MudPaper>
            </MudItem>
            <MudItem xs="6" sm="3" Class="center-text">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center"><MudText Typo="Typo.h6">Año Actual<br /> @Summary?.Yearly</MudText></MudPaper>
            </MudItem>
     </MudGrid>
</MudContainer>


    @code {

    private Guid UserId = Guid.Empty;
    private List<TimeTracking> tracks = new();
    private TimeTrackingSummary Summary;



    private async Task TrackTime()
    {
        if (!UserId.Equals(Guid.Empty))
        {
            if(await WorkShiftService.CanRegisterTime(UserId,DateTime.Now))
            {
                await TimeTrackingService.TryTrackTimeAsync(UserId, DateTime.Now, DateTime.Now);
                tracks = await TimeTrackingService.GetTodaysTracksAsync(UserId);
                Summary = await TimeTrackingService.GetTimeTrackingSummary(UserId);
                StateHasChanged();

            } else
            {
                Snackbar.Add("No se ha encontrado un turno para el usuario actual válido. No se puede iniciar el turno.", Severity.Error);
            }
        }
    }


}
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Mvc;
using EukairiaWeb.Services;

namespace EukairiaWeb.Components.Pages
{
    [IgnoreAntiforgeryToken]
    public partial class Home : ComponentBase
    {
        [Inject]
        protected NavigationManager? NavigationManager { get; set; }
        [Inject]
        protected GlobalService? GlobalService { get; set; }



        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            var result = await SessionStorage.GetAsync<Guid>("UserId");
            if (!result.Success || (!result.Value.Equals(Guid.Empty)))
            {
                UserId = result.Value;
            }
            tracks = await TimeTrackingService.GetTodaysTracksAsync(UserId);
            Summary = await TimeTrackingService.GetTimeTrackingSummary(UserId);

            try
            {
                var result2 = await SessionStorage.GetAsync<bool>("isAuthenticated");
                if (!result2.Success || !result2.Value)
                {
                    NavigationManager.NavigateTo("/");

                }
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine($"Error al obtener isAuthenticated: {ex.Message}");
                // Considera manejar el error de manera adecuada aquí
            }

            StateHasChanged();
        }

    }
}
@page "/import"
@rendermode InteractiveServer
@inject ISnackbar SnackBar;

@using EukairiaWeb.Data.Models;

@inject TimeTrackingService TimeTrackingService;

<MyMudProviders />

<PageTitle>Importar</PageTitle>

<div style="display: flex; align-items: center; justify-content: center;">
    <MudGrid>
        <MudItem xs="4">
            <div style="display: flex; align-items: center; justify-content: center;">
                <div style="display: flex; align-items: center; justify-content: center;">
                    <MudIcon Icon="@Icons.Material.Filled.QuestionMark" class="ms-3 me-3" Style="font-size: 64px;" Color="Color.Warning" />
                    <MudText Style="text-align: justify;" Typo="Typo.body1">Para importar datos, selecciona el fichero csv de los registros horarios que quieres importar y aprete el botón importar. Recuerda que el fichero sólo debe contener 3 columnas, el id del usuario, el inicio del registro horario y el final del registro horario</MudText>
                </div>
            </div>
        </MudItem>
        <MudItem xs="12">
            <InputFile class="custom-file-input" OnChange="HandleFileUpload" MaxFileSize="10485760" />
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ProcessFile">Importar</MudButton>
        </MudItem>
        <MudItem xs="4">
            <MudProgressLinear Color="Color.Success" Rounded="true" Striped="true" Size="Size.Large" Value="@progressValue" Min="0" Max="100">
                <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                    <b>@progressValue%</b>
                </MudText>
            </MudProgressLinear>
        </MudItem>
    </MudGrid>
</div>

@code {
    private MemoryStream memoryStream;
    private int progressValue = 0;
    private List<string> parsedData = new();


    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var maxAllowedSize = 10 * 1024 * 1024;
        if ((file != null) && file.Size <= maxAllowedSize)
        {
            memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize).CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            progressValue = 0;
        }
        else
        {
            SnackBar.Add("El archivo excede el tamaño máximo permitido de 10 Mb.", Severity.Warning);
        }
    }

    private async Task ProcessFile()
    {
        if (memoryStream == null)
        {
            SnackBar.Add("No se ha subido ningun fichero", Severity.Warning);
            return;
        }

        SnackBar.Add("Procesando archivo...", Severity.Info);

        using (var reader = new StreamReader(memoryStream))
        {
            while (!reader.EndOfStream)
            {
                var line = reader.ReadLine();
                parsedData.Add(line);
            }
        }

        SnackBar.Add("Importando datos...", Severity.Info);

        var totalLines = parsedData.Count();
        var i = 0;

        foreach (string parsedline in parsedData)
        {
            var splitLine = parsedline.Split(";");
            try
            {
                progressValue = Convert.ToInt16(((double)i / totalLines) * 100);
                await Task.Yield();
                await InvokeAsync(() => StateHasChanged());
                i++;
                var tmp = new TimeTracking
                    {
                        Day = DateTime.Parse(splitLine[0]),
                        UserId = Guid.Parse(splitLine[1]),
                        StartTime = DateTime.Parse(splitLine[2]),
                        EndTime = DateTime.Parse(splitLine[3]),
                    };

                await TimeTrackingService.Save(tmp);
                await TimeTrackingService.CalculateTimeTrackingAsync();

            }
            catch { }
        }

        SnackBar.Add($"Archivo importado exitosamente. Total líneas procesadas: {totalLines}", Severity.Success);

    }
}
@page "/calendar"

@rendermode InteractiveServer
@using EukairiaWeb.Data.Models;

@inject LeaveRequestService LeaveRequestService;
@inject ProtectedSessionStorage SessionStorage
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Helpers
@using EukairiaWeb.Services
@using EukairiaWeb.Components

<MyMudProviders />

<PageTitle>Calendarios de permisos</PageTitle>

<Scheduler TodayButtonText="Hoy" PlusOthersText="+ {n} más" StartDayOfWeek=DayOfWeek.Monday EnableDragging=false EnableAppointmentsCreationFromScheduler=false>
    <Appointments>
        @if(leaveRequests != null) {
        @foreach (var leaveRequest in leaveRequests)
        {
            <Appointment Start="@leaveRequest.StartDateDt" End="@leaveRequest.EndDateDt" Color="@GetAppointmentColor(leaveRequest.IsPending)">
                    @leaveRequest.Reason
            </Appointment>
        }
        }
    </Appointments>
</Scheduler>


@code {
    private List<LeaveRequest> leaveRequests;

    private string GetLeaveTypeName(LeaveType leaveType)
    {
        return leaveType switch
        {
            LeaveType.Paid => "Retribuido",
            LeaveType.UnPaid => "No retribuido",
            LeaveType.Vacation => "Vacaciones",
            _ => "Desconocido"
        };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var UserId = await SessionStorage.GetAsync<Guid>("UserId");
        if (UserId.Success)
        {
            leaveRequests = await LeaveRequestService.GetLeaveRequestsByUserAsync(UserId.Value);
            StateHasChanged();
        }


    }



    private string GetAppointmentColor(LeaveRequestStatus status)
    {
        switch (status)
        {
            case LeaveRequestStatus.Approved:
                return "MediumSeaGreen";
            case LeaveRequestStatus.Pending:
                return "Orange"; 
            default:
                return "Tomato"; 
        }
    }

}
@page "/"
@rendermode InteractiveServer
@layout Layout.LoginLayout
@using EukairiaWeb.Services
@inject Microsoft.AspNetCore.Authentication.IAuthenticationService AuthenticationService
@inject IHttpContextAccessor HttpContextAccessor

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject UsersService UsersService

@inject ProtectedSessionStorage SessionStorage

<MyMudThemeProvider />

<div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
    <MudPaper Class="pa-4" Elevation="1" Square="true" MinWidth="600px" Style="margin: auto;">
        <MudChip Icon="@Icons.Material.Filled.HourglassEmpty" Color="Color.Secondary">Eurikia</MudChip>
        <MudText Typo="Typo.h5" GutterBottom="true">Iniciar sesión</MudText>
        <MudForm>
            <MudTextField @bind-Value="username" Label="Nombre de usuario" Variant="Variant.Filled" FullWidth />
             <MudTextField @bind-Value="password" Label="Contraseña" Variant="Variant.Filled" FullWidth InputType="InputType.Password" />
             <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="DoLogin" FullWidth>Iniciar Sesión</MudButton>
            <hr />
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="LoginWithAzureAd" FullWidth>Iniciar Sesión con Azure AD</MudButton>
        </MudForm>
    </MudPaper>
</div>

@code {
    private string username;
    private string password;

    private async Task DoLogin()
    {
        var validated = UsersService.ValidateUser(username, password);
        if (validated)
        {
            var expiration = DateTime.Now.AddSeconds(5);
            var user = UsersService.GetUserByEmail(username);
            await SessionStorage.SetAsync("sessionExpiration", expiration);
            await SessionStorage.SetAsync("isAuthenticated", true);
            await SessionStorage.SetAsync("Username", username);
            await SessionStorage.SetAsync("Name", user.Name);
            await SessionStorage.SetAsync("UserId", user.UserId);

            NavigationManager.NavigateTo("/home");
        }
        else
        {
            Snackbar.Add("Credenciales no válidas", Severity.Error);
        }
    }

    private void LoginWithAzureAd()
    {
        NavigationManager.NavigateTo("/authenticate", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var ADuser = HttpContextAccessor.HttpContext.User;
        string userId = ADuser.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value;

        if(ADuser.Identity.IsAuthenticated)
        {
            var user = UsersService.GetUserByEmail(ADuser.Identity.Name);
            var expiration = DateTime.Now.AddSeconds(5);
            await SessionStorage.SetAsync("sessionExpiration", expiration);
            await SessionStorage.SetAsync("isAuthenticated", true);
            await SessionStorage.SetAsync("Username", user.Name);
            await SessionStorage.SetAsync("Name", user.Name);
            await SessionStorage.SetAsync("UserId", user.UserId);

            NavigationManager.NavigateTo("/home");
        }
    }


}
@page "/manageleaverequest"
@rendermode InteractiveServer
@using EukairiaWeb.Data.Models
@using EukairiaWeb.Services
@inject LeaveRequestService LeaveRequestService
@inject IDialogService DialogService
@inject ProtectedSessionStorage SessionStorage

<MyMudProviders />

<MudTable Items="@leaveRequests">
    <HeaderContent>
        <MudTh>Usuario</MudTh>
        <MudTh>Fecha Inicio</MudTh>
        <MudTh>Fecha Fin</MudTh>
        <MudTh>Tipo de Permiso</MudTh>
        <MudTh>Razón</MudTh>
        <MudTh>Estado</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.User.Name</MudTd>
        <MudTd>@context.StartDate?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>@context.EndDate?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd>
                @((@context.LeaveType switch
            {
                LeaveType.Paid => "Retribuido",
                LeaveType.UnPaid => "No retribuido",
                LeaveType.Vacation => "Vacaciones",
                _ => context.LeaveType.ToString()
            }))
        </MudTd>
            <MudTd>@context.Reason</MudTd>
            <MudTd>
                @((@context.IsPending switch
            {
                LeaveRequestStatus.Pending => "Pendiente",
                LeaveRequestStatus.Approved => "Aceptada",
                LeaveRequestStatus.Denied => "Denegada",
                _ => context.IsPending.ToString()
            }))
        </MudTd>
            <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Check" OnClick="@(() => AcceptLeaveRequest(context))" Color="Color.Success" />
            <MudIconButton Icon="@Icons.Material.Filled.Cancel" OnClick="@(() => DeniedLeaveRequest(context))" Color="Color.Error" />
        </MudTd>
        </RowTemplate>
    </MudTable>

@code {
    private List<LeaveRequest> leaveRequests = new List<LeaveRequest>();

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        await LoadLeaveRequests();
    }

    private async Task LoadLeaveRequests()
    {

        leaveRequests = await LeaveRequestService.GetLeaveRequestsAsync();
        StateHasChanged();
    }

    private async Task AcceptLeaveRequest(LeaveRequest leaveRequest)
    {
        bool? result = await DialogService.ShowMessageBox("Confirmación", $"¿Estás seguro de que quieres aceptar la solicitud?", yesText: "Aceptar", cancelText: "Cancelar");

        if (result == true)
        {
            leaveRequest.IsPending = LeaveRequestStatus.Approved;
            await LeaveRequestService.UpdateLeaveRequestAsync(leaveRequest);
            LoadLeaveRequests();
        }
    }

    private async Task DeniedLeaveRequest(LeaveRequest leaveRequest)
    {
        bool? result = await DialogService.ShowMessageBox("Confirmación", $"¿Estás seguro de que quieres denegar la solicitud?", yesText: "Denegar", cancelText: "Cancelar");

        if (result == true)
        {
            leaveRequest.IsPending = LeaveRequestStatus.Denied;
            await LeaveRequestService.UpdateLeaveRequestAsync(leaveRequest);
            LoadLeaveRequests();
        }
    }
}
@page "/timesummary"
@using EukairiaWeb.Data.Models
@using System.Linq
@using EukairiaWeb.Helpers
@rendermode InteractiveServer
@inject TimeTrackingService TimeTrackingService
@inject UsersService UsersService
@inject WorkShiftService WorkShiftService;
@inject ProtectedSessionStorage SessionStorage;
@inject NavigationManager NavigationManager

<MyMudProviders />
@if (isLoading)
{
    <div class="loading-overlay">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        <p>Recalculado, por favor espera...</p>
    </div>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center">
                <MudText Typo="Typo.h5">Registros Horarios</MudText>
            </MudPaper>
        </MudItem>

        <!-- Filtros -->
        <MudItem xs="12">
            <MudSelect T="Guid" Label="Filtrar por Usuario" @bind-Value="selectedUserId">
                @foreach (var user in users)
                {
                    <MudSelectItem Value="@user.UserId">@user.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudDatePicker Label="Fecha de inicio" @bind-Date="startDate" DateFormat="dd-MM-yyyy" />
        </MudItem>
        <MudItem xs="12">
            <MudDatePicker Label="Fecha de fin" @bind-Date="endDate" DateFormat="dd-MM-yyyy" />
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyFilters">Aplicar Filtros</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RecalcTime">Recalcular tiempo</MudButton>
        </MudItem>

        <MudItem xs="7">
            <MudTable Items="@timeTrackings" Striped="true" Bordered="true" Dense="false" Hover="true" SortLabel="Sort By">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="@((Func<TimeTracking, object>)(x => x.User.Name))">Usuario</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="@((Func<TimeTracking, object>)(x => x.Day))">Día</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="@((Func<TimeTracking, object>)(x => x.StartTime))">Hora de Inicio</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="@((Func<TimeTracking, object>)(x => x.EndTime))">Hora de Fin</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="@((Func<TimeTracking, object>)(x => x.MinutesWithinShift))">Tiempo Dentro del Turno</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="@((Func<TimeTracking, object>)(x => x.MinutesOutsideShift))">Tiempo No Computable</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Usuario">@context.User.Name</MudTd>
                        <MudTd DataLabel="Día">@context.Day.ToShortDateString()</MudTd>
                        <MudTd DataLabel="Hora de Inicio">@context.StartTime.ToString("HH:mm")</MudTd>
                        <MudTd DataLabel="Hora de Fin">@context.EndTime?.ToString("HH:mm")</MudTd>
                        <MudTd DataLabel="Minutos Dentro del Turno">@context.MinutesWithinShift.ToString(@"hh\:mm")</MudTd>
                        <MudTd DataLabel="Minutos Fuera del Turno">@context.MinutesOutsideShift.ToString(@"hh\:mm")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>

            <MudItem xs="4">
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center">
                    <MudText Typo="Typo.h5">Resumen</MudText>
                </MudPaper>
                <MudDivider />
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center">
                    <MudText Typo="Typo.body2">Hora trabajadas</MudText>
                </MudPaper>
                <MudDivider />
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center">
                    <MudText Typo="Typo.body2">@HorasTrabajadas</MudText>
                </MudPaper>
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center">
                    <MudText Typo="Typo.body2">Hora no computables</MudText>
                </MudPaper>
                <MudDivider />
                <MudPaper Elevation="2" Class="pa-4 center-text" Style="text-align:center">
                    <MudText Typo="Typo.body2">@HorasNoComputables</MudText>
                </MudPaper>

            </MudItem>
            <MudItem xs="3">

            </MudItem>
            <MudItem xs="3">

            </MudItem>
        </MudGrid>
}

@code {
    private string filterUserId = string.Empty;
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private List<TimeTracking> timeTrackings = new List<TimeTracking>();
    private object selectedItem;
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "filas por página:";
    private string infoFormat = "{first_item}/{last_item} de {all_items}";
    private string allItemsText = "Todos";
    private string HorasTrabajadas;
    private string HorasNoComputables;
    private TimeSpan WorkHours;
    private TimeSpan OutsideHours;
    private TimeSpan TheoricHoursHork;
    private bool isLoading = false;


    private List<User> users = new List<User>();
    private Guid selectedUserId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var res = await SessionStorage.GetAsync<Guid>("UserId");
            if (res.Success)
            {
                selectedUserId = res.Value;
            }
            users = await UsersService.GetUsersAsync();
            startDate = new DateTime(DateTime.Now.Year, 1, 1);
            endDate = new DateTime(DateTime.Now.Year, 12, 31);
            await ApplyFilters();
        }
    }

    private async Task ApplyFilters()
    {
        timeTrackings = await TimeTrackingService.GetFilteredTimeTrackings(selectedUserId, startDate, endDate);

        WorkHours = TimeTrackingService.GetWorkHours(selectedUserId, startDate, endDate);
        OutsideHours = TimeTrackingService.GetOutSideHours(selectedUserId, startDate, endDate);
        TheoricHoursHork = await WorkShiftService.GetTheoricalHoursWorked(selectedUserId, startDate, endDate);
        HorasTrabajadas = TimeFormatHelper.getTimeFormat(WorkHours) + "/" + TimeFormatHelper.getTimeFormat(TheoricHoursHork);
        HorasNoComputables = TimeFormatHelper.getTimeFormat(OutsideHours);

        StateHasChanged();
    }

    private async Task RecalcTime()
    {
        isLoading = true;
        StateHasChanged();

        await TimeTrackingService.CalculateTimeTrackingAsync();
        await ApplyFilters();

        isLoading = false;
        StateHasChanged();
    }




}
using MudBlazor;

namespace EukairiaWeb.Theme


    public class EukairiaTheme : MudTheme
    {
        public EukairiaTheme()
        {
                        Palette = new PaletteLight()
            {
                Primary = "#594AE2",
                AppbarBackground = "#594AE2"
            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#594AE2",
                AppbarBackground = "#594AE2"
            }
        }
    }

}
@rendermode InteractiveServer

<MudThemeProvider  />
<MudDialogProvider />
<MudSnackbarProvider />

@code {

}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
	
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/Heron.MudCalendar/Heron.MudCalendar.min.css" rel="stylesheet" />
    <link href="_content/BlazorScheduler/css/styles.css" rel="stylesheet" />
	
	
    <link rel="stylesheet" href="EukairiaWeb.styles.css" />
    <link rel="icon" type="image/png" href="favicon.ico" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="_content/MudBlazor.Markdown/MudBlazor.Markdown.min.js"></script>
    <script src="_content/BlazorScheduler/js/scripts.js"></script>
    <script src="_framework/blazor.web.js"></script>
</body>

</html>

@using EukairiaWeb.Components.Pages
@using EukairiaWeb.Components.Layout
@rendermode InteractiveServer

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true" >
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
    </Found>
</Router>

@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using EukairiaWeb
@using EukairiaWeb.Components
@using EukairiaWeb.Services
@using MudBlazor
@using MudBlazor.Services
@using MudBlazor.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using BlazorScheduler
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Mvc;

namespace EukairiaWeb.Controllers
{
    public class AccountController : Controller
    {
        [HttpGet("authenticate")]
        public IActionResult Authenticate(string returnUrl = "/")
        {
            return Challenge( new AuthenticationProperties { RedirectUri = returnUrl });
        }

        [HttpGet("acceptlogin")]
        [IgnoreAntiforgeryToken]
        public IActionResult acceptlogin(string returnUrl = "/")
        {
            return Challenge(new AuthenticationProperties { RedirectUri = returnUrl });
        }
    }
}
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace EukairiaWeb.Data.Models
{
    public class LeaveRequest
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public Guid Id { get; set; }

        [Required]
        public Guid UserId { get; set; }
        public User User { get; set; }

        [Required]
        public DateTime? StartDate { get; set; }

        [Required]
        public DateTime? EndDate { get; set; }

        [Required]
        public LeaveType LeaveType { get; set; }

        public string Reason { get; set; }

        public LeaveRequestStatus IsPending { get; set; } = LeaveRequestStatus.Pending;

        public DateTime StartDateDt
        {
            get { return StartDate ?? default(DateTime); } // Coalesce operator to provide default value if null
        }
        public DateTime EndDateDt
        {
            get { return EndDate ?? default(DateTime); }
        }
    }
    public enum LeaveType
    {
        Paid, 
        UnPaid,
        Vacation
    }

    public enum LeaveRequestStatus
    {
        Pending,  
        Approved, 
        Denied    
    }
}
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace EukairiaWeb.Data.Models
{
    public class Permission
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public Guid PermissionId { get; set; }

        [Required]
        public string Name { get; set; }

        [Required]
        public string Description { get; set; }

        public bool CanView { get; set; }
        public bool CanEdit { get; set; }
        public List<Role> Roles { get; set; } = new List<Role>();
    }
}
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Security;
using Microsoft.AspNetCore.Identity;

namespace EukairiaWeb.Data.Models
{
    public class Role
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public Guid RoleId { get; set; }
        public string RoleName { get; set; }
        public ICollection<Permission> Permissions { get; set; }
        public ICollection<User> Users { get; set; }
    }

}
namespace EukairiaWeb.Data.Models
{
    // TimeTracking.cs
    using System;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;

    public class TimeTracking
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public Guid TimeTrackingId { get; set; }

        public Guid UserId { get; set; }
        public DateTime Day { get; set; }

        public DateTime StartTime { get; set; }
        public DateTime? EndTime { get; set; }

        [ForeignKey("UserId")]
        public User User { get; set; }

        public TimeSpan MinutesWithinShift { get; set; }

        public TimeSpan MinutesOutsideShift { get; set; }
        public bool IsCalculated {  get; set; }
    }

}
namespace EukairiaWeb.Data.Models
{
    public class TimeTrackingSummary
    {
        public string Daily { get; set; }
        public string Weekly { get; set; }
        public string Monthly { get; set; }
        public string Yearly { get; set; }
    }
}
using Microsoft.AspNetCore.Identity;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace EukairiaWeb.Data.Models
{
    public class User
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public Guid UserId { get; set; }
        public string Email { get; set; }

        public string Password { get; set; }

        public string Name { get; set; }

        public Guid RoleId { get; set; }
        public Role Role { get; set; }

        public List<TimeTracking> TimeTrackings { get; set; }

        public Guid AzureAdGuid { get; set; }

    }

}
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace EukairiaWeb.Data.Models
{
    public class WorkShift
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public Guid Id { get; set; }
        public Guid UserId { get; set; } // Clave foránea a User
        public TimeSpan? StartTime { get; set; } // Hora de inicio del turno
        public TimeSpan? EndTime { get; set; } // Hora de fin del turno
        public TimeSpan? MaxEntryTime { get; set; } // Hora máxima de entrada
        public TimeSpan? MinExitTime { get; set; } // Hora mínima de salida
        public TimeSpan? MaxHoursPerDay { get; set; } // Máximo de horas trabajadas por día
        public TimeSpan? HoursPerDay { get; set; } // Máximo de horas trabajadas por día
        public DaysOfWeek ActiveDays { get; set; } // Días de la semana activos para este turno


        // Propiedad de navegación
        [ForeignKey("UserId")]
        public User User { get; set; }

        public DateTime? StartDate { get; set; } // Fecha de inicio de aplicación del turno
        public DateTime? EndDate { get; set; } // Fecha final de aplicación del turno (opcional)

    }

    [Flags]
    public enum DaysOfWeek
    {
        Ninguno = 0,
        Lunes = 1,
        Martes = 2,
        Miercoles = 4,
        Jueves = 8,
        Viernes = 16,
        Sábado = 32,
        Domingo = 64
    }

}
using Microsoft.EntityFrameworkCore;
using EukairiaWeb.Data.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;

namespace EukairiaWeb.Data
{


    public class AppDbContext : IdentityDbContext
    {
        public DbSet<User> Users { get; set; }
        public DbSet<Role> Roles { get; set; }

        public DbSet<Permission> Permissions { get; set; }

        public DbSet<TimeTracking> TimeTrackings { get; set; }

        public DbSet<WorkShift> WorkShifts { get; set; }
        public DbSet<LeaveRequest> LeaveRequests { get; internal set; }

        protected override void OnConfiguring(DbContextOptionsBuilder options) => options.UseSqlite("Data Source=Eukairia.db");

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Role>()
                .HasMany(r => r.Permissions)
                .WithMany(p => p.Roles)
                .UsingEntity(j => j.ToTable("RolePermissions"));

            modelBuilder.Entity<User>()
                .HasOne(u => u.Role)
                .WithMany(r => r.Users)
                .HasForeignKey(u => u.RoleId);

            modelBuilder.Entity<User>()
                .HasMany(u => u.TimeTrackings)
                .WithOne(t => t.User)
                .HasForeignKey(t => t.UserId);
        }

    }

}
namespace EukairiaWeb.Helpers
{
    public class AzureAdCredentials
    {
        public string ClientId { get; set; }
        public string ClientSecret { get; set; }
        public string TenantId { get; set; }
        
    }
}
namespace EukairiaWeb.Helpers
{
    public class GlobalValues
    {

        public string Username;
    }
}
using System.Security.Cryptography;
using System.Text;

namespace EukairiaWeb.Helpers
{
    public class SecurityHelper
    {

        public static string HashValue( string input)
        {
            var hashAlgorithm = SHA256.Create();
            byte[] data = hashAlgorithm.ComputeHash(Encoding.UTF8.GetBytes(input));

            var sBuilder = new StringBuilder();

            for (int i = 0; i < data.Length; i++)
            {
                sBuilder.Append(data[i].ToString("x2"));
            }

            return sBuilder.ToString();
        }
    }
}
namespace EukairiaWeb.Helpers
{
    public class TimeFormatHelper
    {

        public static string getTimeFormat(TimeSpan time)
        {

            int totalHours = (int)Math.Floor(time.TotalHours);  // Obtiene las horas totales como un entero
            int minutes = time.Minutes;  // Obtiene los minutos

            return $"{totalHours:00}:{minutes:00}";
        }
    }
}
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace EukairiaWeb.Migrations
{
    /// <inheritdoc />
    public partial class Initial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "TEXT", nullable: false),
                    Name = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "TEXT", nullable: false),
                    UserName = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "TEXT", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "INTEGER", nullable: false),
                    PasswordHash = table.Column<string>(type: "TEXT", nullable: true),
                    SecurityStamp = table.Column<string>(type: "TEXT", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "TEXT", nullable: true),
                    PhoneNumber = table.Column<string>(type: "TEXT", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "INTEGER", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "INTEGER", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "TEXT", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "INTEGER", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Permissions",
                columns: table => new
                {
                    PermissionId = table.Column<Guid>(type: "TEXT", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: false),
                    Description = table.Column<string>(type: "TEXT", nullable: false),
                    CanView = table.Column<bool>(type: "INTEGER", nullable: false),
                    CanEdit = table.Column<bool>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Permissions", x => x.PermissionId);
                });

            migrationBuilder.CreateTable(
                name: "Roles",
                columns: table => new
                {
                    RoleId = table.Column<Guid>(type: "TEXT", nullable: false),
                    RoleName = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roles", x => x.RoleId);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    RoleId = table.Column<string>(type: "TEXT", nullable: false),
                    ClaimType = table.Column<string>(type: "TEXT", nullable: true),
                    ClaimValue = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    UserId = table.Column<string>(type: "TEXT", nullable: false),
                    ClaimType = table.Column<string>(type: "TEXT", nullable: true),
                    ClaimValue = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "TEXT", nullable: false),
                    ProviderKey = table.Column<string>(type: "TEXT", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "TEXT", nullable: true),
                    UserId = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "TEXT", nullable: false),
                    RoleId = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "TEXT", nullable: false),
                    LoginProvider = table.Column<string>(type: "TEXT", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: false),
                    Value = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RolePermissions",
                columns: table => new
                {
                    PermissionsPermissionId = table.Column<Guid>(type: "TEXT", nullable: false),
                    RolesRoleId = table.Column<Guid>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RolePermissions", x => new { x.PermissionsPermissionId, x.RolesRoleId });
                    table.ForeignKey(
                        name: "FK_RolePermissions_Permissions_PermissionsPermissionId",
                        column: x => x.PermissionsPermissionId,
                        principalTable: "Permissions",
                        principalColumn: "PermissionId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RolePermissions_Roles_RolesRoleId",
                        column: x => x.RolesRoleId,
                        principalTable: "Roles",
                        principalColumn: "RoleId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    UserId = table.Column<Guid>(type: "TEXT", nullable: false),
                    Email = table.Column<string>(type: "TEXT", nullable: false),
                    Password = table.Column<string>(type: "TEXT", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: false),
                    RoleId = table.Column<Guid>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.UserId);
                    table.ForeignKey(
                        name: "FK_Users_Roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "Roles",
                        principalColumn: "RoleId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TimeTrackings",
                columns: table => new
                {
                    TimeTrackingId = table.Column<Guid>(type: "TEXT", nullable: false),
                    UserId = table.Column<Guid>(type: "TEXT", nullable: false),
                    Day = table.Column<DateTime>(type: "TEXT", nullable: false),
                    StartTime = table.Column<DateTime>(type: "TEXT", nullable: false),
                    EndTime = table.Column<DateTime>(type: "TEXT", nullable: true),
                    MinutesWithinShift = table.Column<TimeSpan>(type: "TEXT", nullable: false),
                    MinutesOutsideShift = table.Column<TimeSpan>(type: "TEXT", nullable: false),
                    IsCalculated = table.Column<bool>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TimeTrackings", x => x.TimeTrackingId);
                    table.ForeignKey(
                        name: "FK_TimeTrackings_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "WorkShifts",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "TEXT", nullable: false),
                    UserId = table.Column<Guid>(type: "TEXT", nullable: false),
                    StartTime = table.Column<TimeSpan>(type: "TEXT", nullable: true),
                    EndTime = table.Column<TimeSpan>(type: "TEXT", nullable: true),
                    MaxEntryTime = table.Column<TimeSpan>(type: "TEXT", nullable: true),
                    MinExitTime = table.Column<TimeSpan>(type: "TEXT", nullable: true),
                    MaxHoursPerDay = table.Column<TimeSpan>(type: "TEXT", nullable: true),
                    HoursPerDay = table.Column<TimeSpan>(type: "TEXT", nullable: true),
                    ActiveDays = table.Column<int>(type: "INTEGER", nullable: false),
                    StartDate = table.Column<DateTime>(type: "TEXT", nullable: true),
                    EndDate = table.Column<DateTime>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkShifts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkShifts_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RolePermissions_RolesRoleId",
                table: "RolePermissions",
                column: "RolesRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_TimeTrackings_UserId",
                table: "TimeTrackings",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Users_RoleId",
                table: "Users",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkShifts_UserId",
                table: "WorkShifts",
                column: "UserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "RolePermissions");

            migrationBuilder.DropTable(
                name: "TimeTrackings");

            migrationBuilder.DropTable(
                name: "WorkShifts");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Permissions");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "Roles");
        }
    }
}
// <auto-generated />
using System;
using EukairiaWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EukairiaWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240331161408_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4");

            modelBuilder.Entity("EukairiaWeb.Data.Models.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanView")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.Property<Guid>("TimeTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Day")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("MinutesOutsideShift")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("MinutesWithinShift")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeTrackingId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeTrackings");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActiveDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("HoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxEntryTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxHoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MinExitTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsPermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RolesRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionsPermissionId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany("TimeTrackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EukairiaWeb.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Navigation("TimeTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace EukairiaWeb.Migrations
{
    /// <inheritdoc />
    public partial class AzureIDImport : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<Guid>(
                name: "AzureAdGuid",
                table: "Users",
                type: "TEXT",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "AzureAdGuid",
                table: "Users");
        }
    }
}
// <auto-generated />
using System;
using EukairiaWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EukairiaWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240404160922_AzureIDImport")]
    partial class AzureIDImport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4");

            modelBuilder.Entity("EukairiaWeb.Data.Models.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanView")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.Property<Guid>("TimeTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Day")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("MinutesOutsideShift")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("MinutesWithinShift")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeTrackingId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeTrackings");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AzureAdGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActiveDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("HoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxEntryTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxHoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MinExitTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsPermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RolesRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionsPermissionId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany("TimeTrackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EukairiaWeb.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Navigation("TimeTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace EukairiaWeb.Migrations
{
    /// <inheritdoc />
    public partial class LeaveRequestDB : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "LeaveRequests",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "TEXT", nullable: false),
                    UserId = table.Column<Guid>(type: "TEXT", nullable: false),
                    StartDate = table.Column<DateTime>(type: "TEXT", nullable: false),
                    EndDate = table.Column<DateTime>(type: "TEXT", nullable: false),
                    LeaveType = table.Column<int>(type: "INTEGER", nullable: false),
                    Reason = table.Column<string>(type: "TEXT", nullable: false),
                    IsPending = table.Column<bool>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveRequests", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "LeaveRequests");
        }
    }
}
// <auto-generated />
using System;
using EukairiaWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EukairiaWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240406154708_LeaveRequest")]
    partial class LeaveRequestDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4");

            modelBuilder.Entity("EukairiaWeb.Data.Models.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPending")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanView")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.Property<Guid>("TimeTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Day")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("MinutesOutsideShift")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("MinutesWithinShift")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeTrackingId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeTrackings");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AzureAdGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActiveDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("HoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxEntryTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxHoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MinExitTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsPermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RolesRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionsPermissionId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany("TimeTrackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EukairiaWeb.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Navigation("TimeTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace EukairiaWeb.Migrations
{
    /// <inheritdoc />
    public partial class UpdateLeaveRequestStatus : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateIndex(
                name: "IX_LeaveRequests_UserId",
                table: "LeaveRequests",
                column: "UserId");

            migrationBuilder.AddForeignKey(
                name: "FK_LeaveRequests_Users_UserId",
                table: "LeaveRequests",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "UserId",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_LeaveRequests_Users_UserId",
                table: "LeaveRequests");

            migrationBuilder.DropIndex(
                name: "IX_LeaveRequests_UserId",
                table: "LeaveRequests");
        }
    }
}
// <auto-generated />
using System;
using EukairiaWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EukairiaWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240406171146_UpdateLeaveRequestStatus")]
    partial class UpdateLeaveRequestStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4");

            modelBuilder.Entity("EukairiaWeb.Data.Models.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPending")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanView")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.Property<Guid>("TimeTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Day")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("MinutesOutsideShift")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("MinutesWithinShift")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeTrackingId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeTrackings");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AzureAdGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActiveDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("HoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxEntryTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxHoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MinExitTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsPermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RolesRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionsPermissionId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.LeaveRequest", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany("TimeTrackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EukairiaWeb.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Navigation("TimeTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
// <auto-generated />
using System;
using EukairiaWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EukairiaWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4");

            modelBuilder.Entity("EukairiaWeb.Data.Models.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPending")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanView")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.Property<Guid>("TimeTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Day")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("MinutesOutsideShift")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("MinutesWithinShift")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TimeTrackingId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeTrackings");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AzureAdGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActiveDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("HoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxEntryTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MaxHoursPerDay")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("MinExitTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsPermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RolesRoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionsPermissionId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.LeaveRequest", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.TimeTracking", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany("TimeTrackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.WorkShift", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("EukairiaWeb.Data.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EukairiaWeb.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EukairiaWeb.Data.Models.User", b =>
                {
                    b.Navigation("TimeTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     Este cÃ³digo fue generado por una herramienta.
//     VersiÃ³n de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrÃ­an causar un comportamiento incorrecto y se perderÃ¡n si
//     se vuelve a generar el cÃ³digo.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("EukairiaWeb")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+f8c3873d2fec4d6e77180671d1702f640105af29")]
[assembly: System.Reflection.AssemblyProductAttribute("EukairiaWeb")]
[assembly: System.Reflection.AssemblyTitleAttribute("EukairiaWeb")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generado por la clase WriteCodeFragment de MSBuild.

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
//------------------------------------------------------------------------------
// <auto-generated>
//     Este cÃ³digo fue generado por una herramienta.
//     VersiÃ³n de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrÃ­an causar un comportamiento incorrecto y se perderÃ¡n si
//     se vuelve a generar el cÃ³digo.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.Identity.Web")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.Identity.Web.UI")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Microsoft.Identity.Web.UI.Views")]

// Generado por la clase WriteCodeFragment de MSBuild.

//------------------------------------------------------------------------------
// <auto-generated>
//     Este cÃ³digo fue generado por una herramienta.
//     VersiÃ³n de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrÃ­an causar un comportamiento incorrecto y se perderÃ¡n si
//     se vuelve a generar el cÃ³digo.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("EurikiaWeb")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("EurikiaWeb")]
[assembly: System.Reflection.AssemblyTitleAttribute("EurikiaWeb")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generado por la clase WriteCodeFragment de MSBuild.

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using EukairiaWeb.Helpers;

namespace EukairiaWeb.Services
{
    public class GlobalService
    {

        public GlobalValues globalValues = new GlobalValues();


        public delegate void RefreshedGlobalValuesDelegate(GlobalValues newValues);
        public RefreshedGlobalValuesDelegate RefreshedGlobalValues;

        public void SetUserName(string userName)
        {
            globalValues.Username = userName;
            if (RefreshedGlobalValues != null)
            {
                RefreshedGlobalValues(globalValues);
            }
        }



    }
}
using EukairiaWeb.Data;
using EukairiaWeb.Data.Models;
using EukairiaWeb.Migrations;
using Microsoft.EntityFrameworkCore;

namespace EukairiaWeb.Services
{
    public class LeaveRequestService
    {
        private readonly AppDbContext _context;

        public LeaveRequestService(AppDbContext context)
        {
            _context = context;
        }

        public async Task<List<LeaveRequest>> GetLeaveRequestsByUserAsync(Guid userId)
        {
            return await _context.LeaveRequests
                                 .Where(r => r.UserId == userId && r.IsPending != LeaveRequestStatus.Denied)
                                 .ToListAsync();
        }

        public async Task<List<LeaveRequest>> GetLeaveRequestsAsync()
        {
            return await _context.LeaveRequests.Include(lr => lr.User).ToListAsync();
        }

        public async Task AddLeaveRequestAsync(LeaveRequest request)
        {
            _context.LeaveRequests.Add(request);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateLeaveRequestAsync(LeaveRequest request)
        {
            _context.LeaveRequests.Update(request);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteLeaveRequestAsync(LeaveRequest request)
        {
            _context.LeaveRequests.Remove(request);
            await _context.SaveChangesAsync();
        }
    }
}

using EukairiaWeb.Data;
using EukairiaWeb.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Graph.Solutions.VirtualEvents.Webinars.GetByUserIdAndRoleWithUserIdWithRole;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EukairiaWeb.Services
{


    public class RolesService
    {
        private readonly AppDbContext _context;

        public static readonly string AdministratorRolName = "Administrador";
        public static readonly string UserRolName = "Usuario";

        public RolesService(AppDbContext context)
        {
            _context = context;
        }

        public async Task<Guid> GetByUserRoleId()
        {
            var res = await _context.Roles.FirstOrDefaultAsync(x => x.RoleName.Equals(UserRolName));
            return res.RoleId;
        }

        public async Task<List<Role>> GetRolesAsync()
        {
            return await _context.Roles.ToListAsync();
        }

        public async Task<Role> GetRoleByIdAsync(Guid roleId)
        {
            return await _context.Roles.FindAsync(roleId);
        }

        public async Task AddRoleAsync(Role role)
        {
            _context.Roles.Add(role);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateRoleAsync(Role role)
        {
            _context.Entry(role).State = EntityState.Modified;
            await _context.SaveChangesAsync();
        }

        public async Task DeleteRoleAsync(Guid roleId)
        {
            var role = await _context.Roles.FindAsync(roleId);
            if (role != null)
            {
                _context.Roles.Remove(role);
                await _context.SaveChangesAsync();
            }
        }
    }

}
namespace EukairiaWeb.Services
{
    // TimeTrackingService.cs
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using EukairiaWeb.Data.Models;
    using EukairiaWeb.Data;
    using Microsoft.EntityFrameworkCore;

    public class TimeTrackingService
    {
        private readonly AppDbContext _context;

        public TimeTrackingService(AppDbContext context)
        {
            _context = context;
        }



        public async Task<List<TimeTracking>> GetFilteredTimeTrackings(Guid UserId, DateTime? StartDate, DateTime? EndDate)
        {
            return await _context.TimeTrackings.Where(t => t.UserId.Equals(UserId) && t.Day >= StartDate && t.Day <= EndDate).ToListAsync();
        }
        public async Task<List<TimeTracking>> GetTimeTrackingsAsync()
        {
            return await _context.TimeTrackings.ToListAsync();
        }


        public async Task<bool> TryTrackTimeAsync(Guid userId, DateTime startTime, DateTime endTime)
        {
            var workShifts = await _context.WorkShifts
                .Where(ws => ws.UserId == userId &&
                             ws.StartDate <= startTime &&
                             (ws.EndDate == null || ws.EndDate >= startTime))
                .ToListAsync();

            var applicableShift = workShifts.FirstOrDefault(ws =>
                ws.ActiveDays.HasFlag((DaysOfWeek)(1 << (int)startTime.DayOfWeek)) &&
                ws.StartTime <= startTime.TimeOfDay &&
                (endTime == null || ws.EndTime >= endTime.TimeOfDay));

            if (applicableShift == null)
            {
                // No se encontró un turno aplicable. No se permite registrar el tiempo.
                return false;
            }

            var newTrack = new TimeTracking
            {
                UserId = userId,
                Day = startTime.Date,
                StartTime = startTime,
                EndTime = endTime,
                // Aquí podrías añadir más lógica para determinar si el tiempo está dentro o fuera del turno
                // y ajustar la entidad TimeTracking según sea necesario.
            };

            _context.TimeTrackings.Add(newTrack);
            await _context.SaveChangesAsync();
            await CalculateTimeTrackingAsync();
            return true;
        }

        public async Task Save(TimeTracking newTrack)
        {
            _context.TimeTrackings.Add(newTrack);
            await _context.SaveChangesAsync();
            await CalculateTimeTrackingAsync();
        }

        public async Task<List<TimeTracking>> GetTodaysTracksAsync(Guid userId)
        {
            var today = DateTime.Today;
            return await _context.TimeTrackings
                .Where(t => t.UserId == userId && t.Day == today)
                .ToListAsync();
        }

        public async Task<TimeSpan> GetTimeTrackedToday(Guid userId)
        {
            var today = DateTime.Today;
            return await GetTimeTrackedForPeriod(userId, today, today);
        }

        public async Task<TimeSpan> GetTimeTrackedThisWeek(Guid userId)
        {
            var now = DateTime.Now;
            var startOfWeek = now.Date.AddDays(-(int)now.DayOfWeek + (int)DayOfWeek.Monday);
            var endOfWeek = startOfWeek.AddDays(6);
            return await GetTimeTrackedForPeriod(userId, startOfWeek, endOfWeek);
        }

        public async Task<TimeSpan> GetTimeTrackedThisMonth(Guid userId)
        {
            var now = DateTime.Now;
            var startOfMonth = new DateTime(now.Year, now.Month, 1);
            var endOfMonth = startOfMonth.AddMonths(1).AddDays(-1);
            return await GetTimeTrackedForPeriod(userId, startOfMonth, endOfMonth);
        }

        public async Task<TimeSpan> GetTimeTrackedThisYear(Guid userId)
        {
            var now = DateTime.Now;
            var startOfYear = new DateTime(now.Year, 1, 1);
            var endOfYear = new DateTime(now.Year, 12, 31);
            return await GetTimeTrackedForPeriod(userId, startOfYear, endOfYear);
        }

        private async Task<TimeSpan> GetTimeTrackedForPeriod(Guid userId, DateTime start, DateTime end)
        {
            var tracks = await _context.TimeTrackings
                .Where(t => t.UserId == userId && t.Day >= start && t.Day <= end && t.EndTime.HasValue)
                .ToListAsync();

            return tracks.Aggregate(TimeSpan.Zero, (total, next) => total.Add(next.EndTime.Value - next.StartTime));
        }

        public async Task<TimeTrackingSummary> GetTimeTrackingSummary(Guid userId)
        {
            var summary = new TimeTrackingSummary
            {
                Daily = await GetFormattedTimeTracked(await GetTimeTrackedToday(userId)),
                Weekly = await GetFormattedTimeTracked(await GetTimeTrackedThisWeek(userId)),
                Monthly = await GetFormattedTimeTracked(await GetTimeTrackedThisMonth(userId)),
                Yearly = await GetFormattedTimeTracked(await GetTimeTrackedThisYear(userId))
            };

            return summary;
        }

        private async Task<string> GetFormattedTimeTracked(TimeSpan timeSpan)
        {
            // Formatea la duración como HH:mm. Ajusta según tus necesidades.
            return $"{(int)timeSpan.TotalHours:00}:{timeSpan.Minutes:00}";
        }



        public async Task CalculateTimeTrackingAsync()
        {
            var timeTrackings = _context.TimeTrackings.Where(t => !t.IsCalculated).ToList();

            foreach (var tracking in timeTrackings)
            {
                tracking.MinutesWithinShift = new TimeSpan();
                tracking.MinutesOutsideShift = new TimeSpan();
            }

                foreach (var tracking in timeTrackings)
            {
                var shifts = _context.WorkShifts.Where(s => s.UserId == tracking.UserId &&
                                                            s.StartDate <= tracking.Day &&
                                                            (s.EndDate == null || s.EndDate >= tracking.Day))
                                                 .ToList();

                foreach (var shift in shifts)
                {
                    if (shift.StartTime.HasValue && shift.EndTime.HasValue)
                    {
                        var shiftStartDateTime = tracking.Day.Date + shift.StartTime.Value;
                        var shiftEndDateTime = tracking.Day.Date + shift.EndTime.Value;

                        if (tracking.StartTime >= shiftStartDateTime && tracking.EndTime <= shiftEndDateTime)
                        {
                            tracking.MinutesWithinShift = tracking.MinutesWithinShift.Add(tracking.EndTime.Value - tracking.StartTime);
                        }
                        else
                        {
                            tracking.MinutesOutsideShift = tracking.MinutesOutsideShift.Add(tracking.EndTime.Value - tracking.StartTime);
                        }
                    }
                }

                tracking.IsCalculated = true;
                _context.TimeTrackings.Update(tracking);
            }

            await _context.SaveChangesAsync();
        }

        public TimeSpan GetWorkHours(Guid selectedUserId, DateTime? startDate, DateTime? endDate)
        {

            var res = new TimeSpan();
            var Hours = _context.TimeTrackings.Where(t => t.UserId.Equals(selectedUserId) && t.Day >= startDate && t.Day <= endDate).ToList();

            foreach (var h in Hours)
            {
                res = res.Add(h.MinutesWithinShift);
            }

            return res;
        }

        public TimeSpan GetOutSideHours(Guid selectedUserId, DateTime? startDate, DateTime? endDate)
        {

            var res = new TimeSpan();
            var Hours = _context.TimeTrackings.Where(t => t.UserId.Equals(selectedUserId) && t.Day >= startDate && t.Day <= endDate).ToList();

            foreach (var h in Hours)
            {
                res = res.Add(h.MinutesOutsideShift);
            }

            return res;
        }




    }

}
using EukairiaWeb.Data.Models;
using EukairiaWeb.Data;
using Microsoft.EntityFrameworkCore;
using EukairiaWeb.Helpers;
using Microsoft.Graph;
using Azure.Identity;
using Microsoft.Graph.Models;
using User = EukairiaWeb.Data.Models.User;


namespace EukairiaWeb.Services
{
    public class UsersService
    {
        private readonly AppDbContext _context;
        private readonly RolesService _RolesService;

        public UsersService(AppDbContext context, RolesService rolesService)
        {
            _context = context;
            _RolesService = rolesService;
        }

        public async Task<List<User>> GetUsersAsync() => await _context.Users.ToListAsync();

        public User GetUserByEmail(string email)
        {
            return _context.Users.ToList().Find(x => x.Email.Equals(email));
        }

        public async Task<User> AddUserAsync(User user)
        {
            try
            {
                _context.Users.Add(user);
                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return user;
        }

        public async Task<User> UpdateUserAsync(User user)
        {
            _context.Users.Update(user);
            await _context.SaveChangesAsync();
            return user;
        }

        public async Task DeleteUserAsync(User user)
        {
            _context.Users.Remove(user);
            await _context.SaveChangesAsync();
        }

        public bool ValidateUser(string UserName, string Password)
        {
            var User = _context.Users.ToList().Find(x => x.Email.Equals(UserName));
            if (User == null)
            {
                return false;
            }
            else
            {
                if (SecurityHelper.HashValue(Password).Equals(User.Password))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }


        public async Task ImportUsersFromAzureAd(string TenantId, string ClientId, string ClientSecret)
        {
            var scopes = new[] { "https://graph.microsoft.com/.default" };
            var clientSecretCredential = new ClientSecretCredential(TenantId, ClientId, ClientSecret);
            var graphServiceClient = new GraphServiceClient(clientSecretCredential, scopes);

            try
            {
                var ADusers = await graphServiceClient.Users.GetAsync();

                var ADUserList = ADusers.Value;

                while (ADusers.OdataNextLink != null)
                {
                    ADusers = await graphServiceClient.Users.WithUrl(ADusers.OdataNextLink).GetAsync();
                    ADUserList.AddRange(ADusers.Value);
                }


                foreach (var ADuser in ADUserList)
                {

                    var user = await _context.Users.FirstOrDefaultAsync(u => u.AzureAdGuid.Equals(Guid.Parse(ADuser.Id)));
                    if (user == null)
                    {
                        user = new User() { Name = ADuser.DisplayName, Email = ADuser.UserPrincipalName, AzureAdGuid = Guid.Parse(ADuser.Id), RoleId = await _RolesService.GetByUserRoleId(), Password = SecurityHelper.HashValue("EukairiaUser2012&") };
                        this.AddUserAsync(user);
                    }
                    else
                    {
                        user.AzureAdGuid = Guid.Parse(ADuser.Id);
                        user.Email = ADuser.UserPrincipalName;
                        user.Name = ADuser.DisplayName;
                        this.UpdateUserAsync(user);
                    }

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error recibiendo los usuarios desde Azure AD: {ex.Message}");
            }


        }
    }

}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EukairiaWeb.Data.Models;
using EukairiaWeb.Data;
using Microsoft.EntityFrameworkCore;

public class WorkShiftService
{
    private readonly AppDbContext _context;

    public WorkShiftService(AppDbContext context)
    {
        _context = context;
    }

    public async Task<List<WorkShift>> GetAllWorkShiftsAsync()
    {
        return await _context.WorkShifts.Include(ws => ws.User).ToListAsync();
    }

    public async Task<WorkShift> GetWorkShiftByIdAsync(Guid id)
    {
        return await _context.WorkShifts.Include(ws => ws.User)
            .FirstOrDefaultAsync(ws => ws.Id.Equals(id));
    }

    public async Task AddWorkShiftAsync(WorkShift workShift)
    {
        _context.WorkShifts.Add(workShift);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateWorkShiftAsync(WorkShift workShift)
    {
        _context.WorkShifts.Update(workShift);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteWorkShiftAsync(Guid id)
    {
        var workShift = await _context.WorkShifts.FindAsync(id);
        if (workShift != null)
        {
            _context.WorkShifts.Remove(workShift);
            await _context.SaveChangesAsync();
        }
    }

    public async Task<bool> CanRegisterTime(Guid userId, DateTime dateTime)
    {
        var userWorkShifts = await _context.WorkShifts
            .Where(ws => ws.UserId == userId &&
                         ws.StartDate <= dateTime &&
                         (ws.EndDate == null || ws.EndDate >= dateTime))
            .ToListAsync();

        // Verificar si el día y la hora actual caen dentro de algún turno válido
        if (!userWorkShifts.Any()) return false; // No hay turnos asignados

        var dayOfWeek = (DaysOfWeek)(1 << (int)dateTime.DayOfWeek);
        var timeOfDay = dateTime.TimeOfDay;

        foreach (var shift in userWorkShifts)
        {
            if ((shift.ActiveDays & dayOfWeek) != 0 &&
                timeOfDay >= shift.StartTime &&
                timeOfDay <= shift.EndTime)
            {
                return true;
            }
        }

        return false;
    }

    public async Task<TimeSpan> GetTheoricalHoursWorked(Guid userId, DateTime? startDate, DateTime? endDate)
    {
        var workShifts = await _context.WorkShifts
            .Where(w => w.UserId == userId &&
                        w.StartDate.Value.Date <= endDate &&
                        (w.EndDate.Value.Date >= startDate || w.EndDate == null))
            .ToListAsync();

        var totalHours = new TimeSpan();
        var DaysWithHoursPerDay = new List<DateTime>();

        foreach (var workShift in workShifts)
        {
            var day = workShift.StartDate.Value.Date;
            if (DaysWithHoursPerDay.IndexOf(day) == -1)
            {
                var shiftsForDay = workShifts.Where(ws => ws.StartDate.Value.Date == day);
                if (shiftsForDay.Any())
                {
                    var maxHoursShift = shiftsForDay.OrderByDescending(ws => ws.HoursPerDay.HasValue ? ws.HoursPerDay.Value : TimeSpan.Zero)
                                                    .FirstOrDefault();

                    if (maxHoursShift != null && maxHoursShift.HoursPerDay != null)
                    {
                        totalHours = totalHours.Add(maxHoursShift.HoursPerDay.Value);
                    }
                }
                DaysWithHoursPerDay.Add(day);
            }
        }

        var DateDiff = endDate.Value - startDate.Value;
        return TimeSpan.FromHours(totalHours.TotalHours * DateDiff.TotalDays);
    }

}


using EukairiaWeb.Components;
using EukairiaWeb.Data;
using EukairiaWeb.Data.Models;
using EukairiaWeb.Helpers;
using EukairiaWeb.Services;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.Identity.Web;
using Microsoft.Identity.Web.UI;
using MudBlazor;
using MudBlazor.Services;
using Microsoft.AspNetCore.Components.WebAssembly.Server;

namespace EukairiaWeb
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)
                .AddMicrosoftIdentityWebApp(builder.Configuration.GetSection("AzureAd"))
                .EnableTokenAcquisitionToCallDownstreamApi()
                .AddInMemoryTokenCaches();

            builder.Services.AddControllersWithViews().AddMicrosoftIdentityUI();

            builder.Services.AddDbContext<AppDbContext>();


            builder.Services.AddScoped<UsersService>();
            builder.Services.AddScoped<TimeTrackingService>();
            builder.Services.AddScoped<WorkShiftService>();
            builder.Services.AddScoped<RolesService>();
            builder.Services.AddScoped<LeaveRequestService>();
            builder.Services.AddScoped<GlobalService>();
            

            builder.WebHost.ConfigureKestrel(serverOptions =>
            {
                serverOptions.Limits.MaxRequestBodySize = 10 * 1024 * 1024;
            });


            builder.Services.AddRazorComponents()
                .AddInteractiveServerComponents();
                //.AddInteractiveWebAssemblyComponents();

            builder.Services.AddMudMarkdownServices();

            builder.Services.AddMudServices(config =>
            {
                config.SnackbarConfiguration.PositionClass = Defaults.Classes.Position.TopCenter;
                config.SnackbarConfiguration.PreventDuplicates = false;
                config.SnackbarConfiguration.NewestOnTop = true;
                config.SnackbarConfiguration.ShowCloseIcon = true;
                config.SnackbarConfiguration.BackgroundBlurred = true;
                config.SnackbarConfiguration.VisibleStateDuration = 5000;
                config.SnackbarConfiguration.HideTransitionDuration = 500;
                config.SnackbarConfiguration.ShowTransitionDuration = 500;
            });


            var app = builder.Build();


            app.UseAuthentication();
            app.UseAntiforgery();
            app.UseAuthorization();
            app.UseStatusCodePagesWithRedirects("/error");

            if (!app.Environment.IsDevelopment())
            {
                app.UseHsts();
            }

            app.UseHttpsRedirection();

            app.UseStaticFiles();
            app.MapControllers();

            app.MapRazorComponents<App>()
                .AddInteractiveServerRenderMode();
                //.AddInteractiveWebAssemblyRenderMode();

            await EnsureAdminRoleAndPermissions(app.Services);
            await EnsureUserRoleAndPermissions(app.Services);
            await EnsureAdminUser(app.Services);

            app.Run();
        }

        public static async Task EnsureAdminUser(IServiceProvider serviceProvider)
        {
            using var scope = serviceProvider.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();

            var adminEmail = "admin@eukairia.com";
            var adminUser = context.Users.ToList().Find(x => x.Email.Equals(adminEmail));
            if (adminUser == null)
            {
                var rolAdminUser = context.Roles.ToList().Find(x => x.RoleName.Equals(RolesService.AdministratorRolName)); 
                adminUser = new User { Name = adminEmail, Email = adminEmail, Role = rolAdminUser };
                adminUser.Password = SecurityHelper.HashValue("AdministradorOC2024&");
                context.Users.Add(adminUser);
                await context.SaveChangesAsync();
            }
        }

        public static async Task EnsureAdminRoleAndPermissions(IServiceProvider serviceProvider)
        {
            var adminRoleName = RolesService.AdministratorRolName;
            using var scope = serviceProvider.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
            var rolAdminUser = context.Roles.ToList().Find(x => x.RoleName.Equals(adminRoleName));
            if (rolAdminUser == null)
            {

                rolAdminUser = new Role { RoleName = adminRoleName};
                context.Roles.Add(rolAdminUser);
            }

            var permissions = new List<Permission>();
            permissions.Add(new Permission { Name = "Gestionar Usuarios", Description = "Permite crear, editar y eliminar usuarios", CanView = true, CanEdit = true });
            permissions.Add(new Permission { Name = "Gestionar Registro de Horas", Description = "Permite acceso total al registro de horas", CanView = true, CanEdit = true });

            rolAdminUser.Permissions = permissions;

            await context.SaveChangesAsync();

        }

        public static async Task EnsureUserRoleAndPermissions(IServiceProvider serviceProvider)
        {
            var RoleName = RolesService.UserRolName;
            using var scope = serviceProvider.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
            var rolUser = context.Roles.ToList().Find(x => x.RoleName.Equals(RoleName));
            if (rolUser == null)
            {

                rolUser = new Role { RoleName = RoleName };
                context.Roles.Add(rolUser);
            }

            var permissions = new List<Permission>();
            permissions.Add(new Permission { Name = "Gestionar Usuarios", Description = "Permite crear, editar y eliminar usuarios", CanView = true, CanEdit = false });
            permissions.Add(new Permission { Name = "Gestionar Registro de Horas", Description = "Permite acceso total al registro de horas", CanView = true, CanEdit = false });

            rolUser.Permissions = permissions;

            await context.SaveChangesAsync();

        }


    }



}

